# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="olM>V@A2I3Yi94_Cb7/of`?R/=TH2lmDRRiwiBKc8Np]ji/DVe5CjwNKBI;vYcfs"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=conf.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

mongo.badges.host = "localhost"
mongo.badges.db = "badges"

cassandra.host = "172.17.190.198"
cassandra.port = 9042
cassandra.keyspace = "badges"

#rabbitmq.url = "amqp://JPHackDay:JPHackDay@rabbit.services.internal:5672"
rabbitmq.url = "amqp://localhost:5672"

messageListener {
  retryInterval: 10 seconds
  actorTimeout: 10 seconds
  event {
    input {
      queueName: Hackday.badge_awarder_service.pending_messages
      exchangeName: Hackday.badge_awarder_service.notifications
      exchangeType: fanout
      bindingArguments: [
        { event_added: true }
      ]
      prefetchCount: 10
    }
    output {
      exchangeName: Hackday.badge_awarder_service.notifications
      exchangeType: headers
      messageTimeout: 10 seconds
    }
    errors {
      exchangeName: Hackday.badge_awarder_service.errors
      exchangeType: headers
      messageTimeout: 10 seconds
    }
  }
}

db.default.driver = org.postgresql.Driver
db.default.url="jdbc:postgresql://localhost:5432/badges"
db.default.user=badges
db.default.password=badges
